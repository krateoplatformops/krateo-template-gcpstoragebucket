---
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: gcpstoragebucket.deployment.krateo.io
spec:
  compositeTypeRef:
    apiVersion: deployment.krateo.io/v1alpha1
    kind: GcpStorageBucket
  resources:
    - base:
        apiVersion: tf.upbound.io/v1beta1
        kind: ProviderConfig
        spec:
          # Note that unlike most provider configs this one supports an array of
          # credentials. This is because each Terraform workspace uses a single
          # Crossplane provider config, but could use multiple Terraform providers each
          # with their own credentials.
          credentials:
            - filename: gcp-credentials.json
              source: Secret
              secretRef:
                namespace: krateo-system
                name: tf-gcp-creds
                key: credentials
      patches:
        - fromFieldPath: metadata.uid
          toFieldPath: metadata.labels[deploymentId]
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-tf-pc"
        - fromFieldPath: spec.projectId
          toFieldPath: spec.configuration
          transforms:
            - type: string
              string:
                fmt: |
                  provider "google" {
                    credentials = "gcp-credentials.json"
                    project     = "%s"
                  }

                  // Modules _must_ use remote state. The provider does not persist state.
                  terraform {
                    backend "kubernetes" {
                      secret_suffix     = "provider-tf-secret"
                      namespace         = "krateo-system"
                      in_cluster_config = true
                    }
                  }
      readinessChecks:
        - type: None
    - base:
        apiVersion: tf.upbound.io/v1beta1
        kind: Workspace
        spec:
          forProvider:
            # Workspaces default to using a remote source - like workspace-remote.yaml.
            # For simple cases you can use an inline source to specify the content of
            # main.tf as opaque, inline HCL.
            source: Inline
          writeConnectionSecretToRef:
            namespace: krateo-system
      patches:
        - fromFieldPath: metadata.uid
          toFieldPath: metadata.labels[deploymentId]
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-workspace"
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-tf-pc"
        - fromFieldPath: spec.storageBucketName
          toFieldPath: metadata.annotations[crossplane.io/external-name]
        - fromFieldPath: spec.storageBucketName
          toFieldPath: spec.forProvider.module
          transforms:
            - type: string
              string:
                fmt: |
                  // Outputs are written to the connection secret.
                  output "url" {
                    value       = google_storage_bucket.example.self_link
                  }

                  // The google provider and remote state are configured by the provider
                  // config - see providerconfig.yaml.
                  resource "google_storage_bucket" "example" {
                    name = "%s"
                    location      = "US"
                    force_destroy = true

                    public_access_prevention = "enforced"
                  }
        - fromFieldPath: metadata.name
          toFieldPath: spec.writeConnectionSecretToRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-workspace"
